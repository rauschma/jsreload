var spawn = require('child_process').spawn;
var fs = require('fs');
var path = require('path');
var _ = require("underscore");

var e = exports;

//------------------- Watching the file system


var filesToWatch = {
    ".html": 1,
    ".css": 1,
    ".js": 1
};
e.watchDir = function (dir, action) {
    fs.readdirSync(dir).forEach(function (filename) {
        var absolute = path.resolve(dir, filename);

        var stats = fs.statSync(absolute);
        if (stats.isDirectory()) {
            e.watchDir(absolute);
        } else if (stats.isFile()) {
            if (path.basename(absolute).indexOf(".") !== 0 && path.extname(absolute) in filesToWatch) {
                console.log("WATCH: "+absolute);
                e.watchFile(absolute, action);
            }
        }
    });
}

/**
 * @param mtime Optional
 */
e.watchFile = function (filename, action, mtime) {
    if (mtime === undefined) {
        mtime = fs.statSync(filename).mtime.getTime()
    }

    var watcher = fs.watch(filename);
    var handler = handleFileChanges.bind(null, filename, mtime, watcher, action);

    // Most editors trigger a series of events whenever a single file is saved
    // Via debouncing, we only take action after the last event.
    watcher.on("change", _.debounce(handler, 250));
}

function handleFileChanges(absName, mtime, watcher, action,
                           /* Listener parameters: */
                           event, fileName) {
    // On Mac OS X, fileName is always null

    switch (event) {
        case 'rename':
            // Some editors (vi) rename the file when swapping it with the new version
            watcher.close();
            if (fs.existsSync(absName)) {
                mtime = fileChanged(event, absName, mtime, action);
                e.watchFile(absName, action, mtime);
            } else {
                // Happens if a file is deleted or a program renames the file.
                // The latter case is usually prevented by debouncing.
                console.log("STOPPED WATCHING: "+absName);
            }
            break;
        case 'change':
            mtime = fileChanged(event, absName, mtime, action);
            break;
    }
}

function fileChanged(event, absName, oldMTime, action) {
    // Check the date of last modification to make sure that there really was a change
    var mtime = fs.statSync(absName).mtime.getTime();
    if (mtime !== oldMTime) {
        console.log(event.toUpperCase()+": "+absName);
        action();
    }
    return mtime;
}

//------------------- Interacting with Mac OS X

/**
 * @param appName Optional
 * @param arg A file name or a URL
 */
e.runOpen = function (appName, arg, callback) {
    var osa = spawn("open", ["-a", appName, arg]);
    var out = "";
    var err = "";
    osa.stdout.on('data', function (data) {
        out += data;
    });
    osa.stderr.on('data', function (data) {
        err += data;
    });
    osa.on('exit', function (code) {
        callback();
    });
}

/**
 * @param callback Optional
 */
e.runAppleScript = function (script, callback) {
    var osa = spawn("osascript", ["-e", script]);
    var out = "";
    var err = "";
    osa.stdout.on('data', function (data) {
        out += data;
    });
    osa.stderr.on('data', function (data) {
        err += data;
    });
    osa.on('exit', function (code) {
        // Ignore stdout (which shows the return value of the AppleScript code)
        if (err.length > 0) {
            console.log("STDERR: "+err);
        }
        if (callback) {
            callback();
        }
    });
}

e.chromeAppName = "Google Chrome";
e.runReloadChrome = e.runAppleScript.bind(null, '\
tell application "'+e.chromeAppName+'"\n\
    tell first tab of first window to reload\n\
end tell\n\
');
e.safariAppName = "Safari";
e.runReloadSafari = e.runAppleScript.bind(null, '\
tell application "'+e.safariAppName+'"\n\
    set mytab to first tab of first window\n\
    tell mytab to do javascript "window.location.reload()"\n\
end tell\n\
');
